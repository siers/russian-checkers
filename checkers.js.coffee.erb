BLACK   = false
WHITE   = true
REGULAR = false
QUEEN   = true
X       = 0
Y       = 1

# This is a mixin, and rules /logically/ actually extend piece, not vice versa.
class Rules
  bound = (cons) ->
    [x, y] = cons
    x >= 0 and x <= 7 and y >= 0 and y <= 7

  # Checks whether on a black square only.
  @black = (cons) ->
    [x, y] = cons ? @target
    (x + y) % 2 == 1
  black: @black

  gen_move_vectors: (zoom = 1) ->
    dir = if @color == BLACK then 1 else -1
    _.chain([[-1, dir], [1, dir]]).map((vec) =>
      target = [@cons[X] + vec[X]*zoom, @cons[Y] + vec[Y]*zoom]
      return undefined unless bound(target)
      target
    ).compact().value()

  # Did he do the obligatory attacking?
  attacked: ->
    can = false
    _(@gen_move_vectors()).each (target) =>
      piece = @set.get(target)
      can = true if piece && piece.color == !@color
    return not can unless can

    dsts = @gen_move_vectors(2)
    return not can if dsts.length == 0

    did   = false
    empty = false
    _(dsts).each (dst) =>
      piece = @set.get(dst)
      empty = true if piece == null
      did   = did || empty and _.isEqual(dst, @target)
    return not empty or did

  valid: (cons) ->
    [@x, @y] = (@target = cons)
    return false unless @black()
    return false unless @attacked()
    return true

class Piece extends Rules
  constructor: (@cons, @color, @set) ->
    @element()

  selected: (e) =>
    e.stopPropagation()
    @element.toggleClass('selected')

  piece = $("<div class='piece' />")

  element: ->
    @element = piece.
      clone(true).
      appendTo(Checkers.field).
      bind('click', @selected)

  classify: ->
    klass = ['piece']
    klass.push "p#{ "hgfedcba"[@cons[0]] }"
    klass.push "p#{ @cons[1]+1 }"
    klass.push "#{ if @color == WHITE then 'white' else 'black' }"
    @element.attr('class', klass.join(' '))

  render: ->
    @classify()

class Pieces
  array: []
  constructor: ->
    for x in [0..7]
      @array.push([])
      for y in [0..7]
        _(@array).last().push(null)

  new: (args...) ->
    [[x, y], _...] = args
    @array[x][y] = new Piece(args..., this)

  get: (cons) ->
    try
      @array[cons[X]][cons[Y]]
    catch e
      $.log "Error on requesting #{ cons[X] }x#{ cons[Y] } from piece set."
      throw e

  each: (fun) ->
    _.chain(@array).flatten().compact().each(fun)

  move: (piece, cons) ->
    @array[piece.cons[X]][piece.cons[Y]] = null
    # A check of emptiness of the destination could be placed here.
    (@array[cons[X]][cons[Y]] = piece).cons = cons

class Moves
  positions: [] # board version list

  constructor: ->
    @positions.push @pieces

class Board extends Moves
  pieces: new Pieces
  unit: null # pixels per one square

  constructor: ->
    @create()
    super

  create: ->
    for x in [0..7]
      for y in [0..5]
        if Rules.black([x, y])
          y += 2 if y > 2
          @pieces.new([x, y], if y > 3 then WHITE else BLACK)

  release: (e) => # Release can be anywhere.
    x    = Math.floor(e.originalEvent.layerX / @unit)
    y    = Math.floor(e.originalEvent.layerY / @unit)
    cons = [x, y]
    sel  = found = @find()
    @put(sel, cons) if found and sel.valid(cons)

  put: (piece, cons) -> # Put only where cons are valid.
    @pieces.move(piece, cons)
    piece.render()

  find: (fun = null) ->
    fun = fun || (p) -> p.element.is('.selected')
    ret = undefined

    @pieces.each (p) ->
      return ((ret = p) && false) if fun(p)

    ret

  render: ->
    @pieces.each (p) -> p.render()

Game.list.checkers = Checkers =
  init: (@field) ->
    @board = new Board
    @board.unit = @field.width() / 8
    @board.render()
    @field.addClass('checkers').bind('click', @board.release)

  stop: ->
    null
