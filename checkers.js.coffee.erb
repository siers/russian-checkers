EMPTY    = null
BLACK    = false
WHITE    = true
REGULAR  = false
QUEEN    = true # Must be always true.
X        = 0
Y        = 1

# This is a mixin, and rules /logically/ actually extend piece, not vice versa.
class Rules
  bound = (cons) ->
    [x, y] = cons ? @target
    x >= 0 and x <= 7 and y >= 0 and y <= 7
  bound: bound

  direction: ->
    if @color == BLACK then 1 else -1

  # Checks whether on a black square only.
  @black = (cons) ->
    [x, y] = cons ? @target
    (x + y) % 2 == 1
  black: @black

  diagonal: ->
    x = @cons[X] - @target[X]
    y = @cons[Y] - @target[Y]
    Math.abs(x) == Math.abs(y)

  # Check that space where it's going is empty.
  empty: ->
    x    = @target[X] - @cons[X]
    y    = @target[Y] - @cons[Y]
    vec  = [x / Math.abs(x), y / Math.abs(y)]
    tile = @cons

    until _.isEqual(tile, @target)
      tile = [tile[X] + vec[X], tile[Y] + vec[Y]]
      return false if @set.get(tile)
    return true

  # Checks whether the move is going towards the other end.
  forward: ->
    return true if @queen
    (@target[Y] - @cons[Y]) == @direction()

  diagonals: (max_length = 1) ->
    _.chain([[-1, 1], [1, 1], [-1, -1], [1, -1]]).map((vec) =>
      tiles   = []
      length  = 1
      while length <= max_length
        cons = [@cons[X] + vec[X]*length, @cons[Y] + vec[Y]*length]
        length++

        break unless bound(cons)
        tiles.push cons
      return undefined if tiles.length == 0
      [tiles, vec]
    ).compact().value()

  UNABLE = 2
  DONE   = 1
  WRONG  = 0

  find: (length, color) ->
    # Looks for the [x,*,*] in diagonal '   x**' where x is the other checker.
    plausible_diognals = _(@diagonals(length)).map ([[tiles..., last], vec]) =>
      plausible = null
      tiles = _(tiles).select (tile) =>
        piece      = @set.get(tile)
        plausible ?= piece && piece.color == color

      if tiles.length == 0
        null # removed by compatct
      else
        tiles.push last
        [tiles, vec]

    _(plausible_diognals).compact()

  # Did he do the obligatory attacking?
  attacked: ->
    plausible_diognals = @find((if @queen then Infinity else 2), !@color)

    empties  = []
    attacked = _(plausible_diognals).any ([tiles, vec]) =>
      past_empty = null # Am I trying to search for empty spaces after a piece?

      _(_(tiles).tail()).detect (tile) =>
        piece = @set.get(tile)
        empties.push(empty = not past_empty and not piece)
        past_empty ?= piece && piece.color != @color # Dry run if past_empty.

        if empty && _.isEqual(tile, @target)
          @victim = @set.get(_(tiles).head())
          unless past_empty # Dry run if past empty.
            return true

    return DONE if attacked
    return UNABLE unless _(empties).any(false)
    return WRONG

  valid: (cons) ->
    [@x, @y] = (@target = cons)
    required = []
    attacked = null
    required.push 'not self', ->
      not _.isEqual(@target, @cons)

    required.push 'proper square', ->
      @black() and @bound()

    required.push 'on diognals', ->
      @diagonal()

    required.push 'has attacked', ->
      (attacked = @attacked()) != WRONG

    required.push 'move forward and on empty tile', ->
      attacked != UNABLE or @forward() and @empty()

    while required.length
      [name, rule] = required.slice(0, 2)
      required.shift() && required.shift()

      if (state = rule.call(this))
        $.log "Rule '#{ name }' passed."
      else
        $.log "Rule '#{ name }' failed!"
        return state

    return true

  move: (cons) ->
    @victim = EMPTY
    if valid = @valid(cons)
      $.log "removin': ", @victim
      @set.remove(@victim) if @victim?
    return valid

class Piece extends Rules
  constructor: (@cons, @color, @queen, @set) ->
    @element()

  @select = (piece) ->
    piece.element.toggleClass('selected')

  piece = $("<div class='piece' />")

  element: ->
    @element = piece.clone(true).appendTo(Checkers.field)

  classify: ->
    klass = ['piece']
    klass.push "p#{ "hgfedcba"[@cons[0]] }"
    klass.push "p#{ @cons[1]+1 }"
    klass.push "#{ if @color == WHITE then 'white' else 'black' }"
    klass.push "#{ if @queen then 'queen' else '' }"
    @element.attr('class', klass.join(' '))

  render: ->
    @classify()

  terminate: ->
    @element.remove()

class Pieces
  array: []
  constructor: ->
    for x in [0..7]
      @array.push([])
      for y in [0..7]
        _(@array).last().push(EMPTY)

  new: (args...) ->
    [[x, y], _...] = args
    @array[x][y] = new Piece(args..., this)

  remove: (p) ->
    @array[p.cons[X]][p.cons[Y]].terminate()
    @array[p.cons[X]][p.cons[Y]] = EMPTY

  get: (cons) ->
    try
      @array[cons[X]][cons[Y]]
    catch e
      $.log "Error on requesting #{ cons[X] }x#{ cons[Y] } from piece set."
      throw e

  list: (fun) ->
    _.chain(@array).flatten().compact().value()

  find: (fun = null) ->
    if fun && (target = fun).nodeName
      fun = (p) -> p.element.is(target)
    fun = fun || (p) -> p.element.is('.selected')
    ret = undefined

    _(@list()).each (p) ->
      ret = p if fun(p)

    ret

  move: (piece, cons) ->
    # A check of emptiness of the destination could be placed here.
    if moved = piece.move(cons)
      @array[cons[X]][cons[Y]] = piece
      @array[piece.cons[X]][piece.cons[Y]] = null
      piece.cons = cons
    return moved

class Moves
  positions: [] # board version list

  constructor: ->
    @positions.push @pieces

class Board extends Moves
  pieces: new Pieces
  unit: null # pixels per one square
  turn: WHITE

  constructor: (@field, @unit) ->
    @create()
    @field.
      addClass('whites-turn checkers').
      bind('click', @release).
      delegate('.piece', 'click', (e) => @pick(e))
    super

  pick: (e) ->
    e.stopPropagation()
    select = @pieces.find()
    target = @pieces.find(e.target)

    if (not select or select.element.is(e.target)) and !!@turn == !!target.color
      Piece.select(target)

  create: ->
    for x in [0..7]
      for y in [0..5]
        if Rules.black([x, y])
          y += 2 if y > 2
          @pieces.new([x, y],
            if y > 3 then WHITE else BLACK,
            if Math.random() * 3 > 2 then QUEEN else REGULAR)

  release: (e) => # Release can be anywhere.
    x    = Math.floor(e.originalEvent.layerX / @unit)
    y    = Math.floor(e.originalEvent.layerY / @unit)
    cons = [x, y]
    sel  = found = @pieces.find()
    @put(sel) if found and !!@turn == !!sel.color and @pieces.move(sel, cons)

  put: (piece) -> # Put only where cons are valid.
    @turn ^= true
    @field.toggleClass('whites-turn blacks-turn')
    @render()

  render: ->
    _(@pieces.list()).invoke('render')

Game.list.checkers = Checkers =
  init: (@field) ->
    @board = new Board(@field, @field.width() / 8)
    @board.render()

  stop: ->
    null
